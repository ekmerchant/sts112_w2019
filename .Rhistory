print("I installed R and RStudio!")
install.packages("rmarkdown")
install.packages("dplyr")
a <- 3
b4 <- 5
cat <- 7
a
b4
cat
a + b4 - cat
a + b4 - cat
cat - 3 + b4
a
a <- 9
a
(dog <- 12)
cat*dog
dog/cat
cat*dog
dog/cat*cat
f <- cat - b4
(f <- cat - b4)
x <- 'he said, "bye"'
x
y
g <- "history"
hi <- "is fun"
twelve <- "12"
y <- "she said, 'hi'"
x <- 'he said, "bye"'
x
y
(x <- "she said 'hi'")
(y <- 'she said "hi"')
(z <- "she said \"hi\"")
(x <- "she said 'hi'")
(y <- 'she said "hi"')
(z <- "she said \"hi\"")
y == z
(x <- "she said 'hi'")
(y <- 'she said "hi"')
(z <- "she said \"hi\"")
y == z
x == y
x == z
plot(cars)
install.packages("tinytex")
install.packages("tlmgr")
library(tinytex)
tinytex::install_tinytex()
tinytex::install_tinytex()
1 + 2
#Create a vector of numbers 101 through 132
vectorObj <- 101:132
#Create a vector of numbers 101 through 132
vectorObj <- 101:132
#See 20th element
vectorObj[20]
#Humanities Data in R 2.5: Subsetting
#Create a vector of numbers 101 through 132
vectorObj <- 101:132
vectorObj
#See 20th element
vectorObj[20]
#Create a new variable with the value of the 20th element
(y <- vectorObj[20])
#Change the value of the 17th element to -2
vectorObj[17] <- -2
vectorObj
#Return elements 6, 17, 20, 30 of vectorObj
vectorObj[c(6, 17, 20, 30)]
#Create a new vector whose values are elements 5-10 of vectorObj
subVec <- vectorObj[5:10]
subVec
#View a vector of length three where every element is equal to element 20 from vectorObj
vectorObj[c(20, 20, 20)]
length(vectorObj)
vectorObj[length(vectorObj)]
#This gives us the whole vector in reverse order:
vectorObj[length(vectorObj):1]
#We can change several elements of the vector at once.
#This replaces the first ten elements with the number 1:
vectorObj[1:10] <- 1
vectorObj
#This replaces the first ten elements with the numbers 1 through 10:
vectorObj[1:10] <- 1:10
vectorObj
#Restoring our original vectorObj:
vectorObj <- 101:132
#We can also use negative numbers in subsetting:
vectorObj[-1]
vectorObj
vectorObj[-c(1, length(vectorObj))]
vectorObj
#Finally, we can use logical values to subset a vector
vectorObj <- 1:8
vectorObj[c(TRUE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE, FALSE)]
vectorObj
#A potentially more useful example creates a logical index to produce a subset of elements greater than 5:
logicalIndex <- vectorObj > 5
logicalIndex
vectorObj[logicalIndex]
vectorObj[vectorObj > 5]
#We can also use this priciple to replace values of a vector:
vectorObj <- 1:100
vectorObj
vectorObj[vectorObj <= 25] <- 25
vectorObj
vectorObj[vectorObj >= 75] <- 75
vectorObj
install.packages("rmarkdown")
install.packages("tinytex")
tinytex::install_tinytex()
plot(cars)
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
stringVec <- c("pear", "apple", "pineapple")
stringVec <- c("pear", "apple", "pineapple")
class(stringVec)
stringVec <- c("pear", "apple", "pineapple")
class(stringVec)
stringVec[2]
stringVec <- c("pear", "apple", "pineapple")
class(stringVec)
stringVec[2]
stringVec
stringVec <- c("pear", "apple", "pineapple")
class(stringVec)
stringVec[2]
stringVec
fruit <- "apples and oranges"
paste(stringVec, "juice", sep = " ")
newVec <- paste(stringVec, "juice", sep = " ")
(newVec <- paste(stringVec, "juice", sep = " "))
(newVec <- paste(stringVec, "juice", sep = " "))
class(newVec)
(newVec <- paste(stringVec, "juice", sep = " "))
class(newVec)
length(newVec)
(newVec <- paste(stringVec, "juice"))
class(newVec)
length(newVec)
substr(stringVec, start = 2, stop = 4)
substr(stringVec, start = 2, stop = 4)
substr(stringVec[1], 2, 4)
substr(stringVec, start = 2, stop = 4)
substr(stringVec[1], 2, 4)
substr("science", 3, 6)
nchar(stringVec)
nchar(stringVec)
substr(stringVec, 3, nchar(stringVec))
index <- grep("apple", stringVec)
grep(pattern = "apple", x = stringVec)
grep("apple", stringVec)
grep("apple", stringVec)
grep("apple", "pineapple")
grep("apple", stringVec)
grep("apple", "pineapple")
stringVec[grep("apple", stringVec)]
x <- 8
y <- "word"
x2 <- c(4:8)
y2 <- c("I like cats", "dogs bark", "the dog ate the bird")
cat <- 4
twelve <- "12"
class(twelve)
class(twelve)
twelve + 1
class(twelve)
twelve + 1
class(twelve)
as.numeric(twelve) + 1
paste(4:12, "th", sep="")
class(4:12)
paste(4:12, "th", sep="")
class(4:12)
class(paste(4:12, "th", sep=""))
class(4:12)
paste(4:12, "th", sep="")
stringVec <- c("pear", "apple", "pineapple")
class(stringVec)
stringVec[2]
stringVec
fruit <- "apples and oranges"
(newVec <- paste(stringVec, "juice", sep = " "))
class(newVec)
length(newVec)
substr(stringVec, start = 2, stop = 4)
substr(stringVec[1], 2, 4)
substr("science", 3, 6)
nchar(stringVec)
substr(stringVec, 3, nchar(stringVec))
grep("apple", stringVec)
grep("apple", "pineapple")
stringVec[grep("apple", stringVec)]
# This script builds on Aleszu Bajak's excellent
# [tutorial on building a course website using R Markdown and Github pages](http://www.storybench.org/convert-google-doc-rmarkdown-publish-github-pages/).
# I was excited about the concept but wanted to automate a few of the production steps: namely generating the HTML files
# for the site from the RMD pages (which Aleszu describes doing one-by-one) and generating the site navigation menu,
# which Aleszu handcodes in the `_site.yml` file. This script should automate both processes, though it may have some quirks
# unique to my setup that you'd want to tweak to fit your own. It's likely more loquacious than necessary as well, so feel free
# to condense as you can. Ideally, each time you make updates to your RMD files you can run this script to generate updated HTML
# pages and a new `_site.yml`. Then commit changes to Github and you're up and running!
# Once you've got everything configured for your own site below, you should be able to run `source('renderSite.R')`
# in your console to generate updated HTML files and an updated menu. You could probably add some Github code to the
# very end to build the commit into the script.
#set working directory
setwd("/users/emily/dropbox/ucdavis/teaching/quarters/winter_2019/sts112/sts112_w2019")
#list all the RMD files in your site's directory
files <- list.files(path = ".", pattern = '*.rmd', full.names = FALSE)
#this function runs over all the RMD files and renders them to their default output (hopeful HTML)
lapply(files, function(x) {
rmarkdown::render(paste0(x))
})
# here I set a few variables for the course that I can paste into the strings below
courseTitle <- "STS 112"
navTitle <- "STS 112: Visualizing Society"
profName <- "M"
profEmail <- "ekmerchant@ucdavis.edu"
profSchedule <- "http://ekmerchant.youcanbook.me"
# this generates a list of the HTML files created in lines 8-10
html_files <- list.files(path = ".", pattern = '*.html', full.names = FALSE)
# the code below works through the listed HTML files and generates a list of strings, formatted as required in the
# `_site.yml` file, that includes each of the site's pages and URLs. It generates the page name in upper case but you could
# tweak that as desired. This does name the pages based on their HTML filenames; if you wanted something more
# descriptive you'd have to write some more code here.
pages <- lapply(html_files, function(x) {
pageName <- sub('\\.html$', '', x)
paste0('    - text: \"',paste(toupper(substr(pageName, 1, 1)), substr(pageName, 2, nchar(pageName)), sep=""),'\"\n',
'      href: ',pageName,'.html','\n')
})
# these collapse the list into a single string. This also renames the "Index" menu item as "Description."
# I put my course description in the `index.html` file so it's the first thing that loads with the site,
# but I think calling the page "Index" in the site menu would be confusing for students. If there were other pages you
# knew you'd want to rename consistently every time you generated the site, you could use the `sub` function to do so.
pages <- paste(pages, collapse = "")
pages <- sub("Index","Description", pages)
# this pastes the standard boilerplate from the top of the `_site.yml` file together with the list of pages
# generated above. This also adds a final menu item with a link to email the professor established in the variables above.
yml <- paste0('name: ',courseTitle,'\n',
'output_dir: \".\"','\n',
'navbar:','\n',
'  title: \"',navTitle,'\"','\n',
'  left:','\n',
pages,
'    - text: \"Email Prof. ',profName,'\"\n',
'      href: mailto:',profEmail,'\n',
'    - text: \"Meet with Prof. ',profName,'\"\n',
'      href: ',profSchedule)
# finally, this writes everything generated above into (what should be) a valid `_site.yml` file.
# Commit the folder to github and everything should be updated!
write(yml, file="_site.yml")
